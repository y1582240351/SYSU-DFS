# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import NameNode.nameNode_pb2 as nameNode__pb2


class nameNodeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getDataNode = channel.unary_unary(
                '/nameNode.nameNode/getDataNode',
                request_serializer=nameNode__pb2.ClientFileRequest.SerializeToString,
                response_deserializer=nameNode__pb2.ClientFileRespond.FromString,
                )
        self.wave = channel.unary_unary(
                '/nameNode.nameNode/wave',
                request_serializer=nameNode__pb2.ClientFinish.SerializeToString,
                response_deserializer=nameNode__pb2.FinishACK.FromString,
                )
        self.mkdir = channel.unary_unary(
                '/nameNode.nameNode/mkdir',
                request_serializer=nameNode__pb2.ClientMkdirRequest.SerializeToString,
                response_deserializer=nameNode__pb2.FinishACK.FromString,
                )
        self.ls = channel.unary_unary(
                '/nameNode.nameNode/ls',
                request_serializer=nameNode__pb2.ClientLsRequest.SerializeToString,
                response_deserializer=nameNode__pb2.ClientLsResponse.FromString,
                )
        self.cd = channel.unary_unary(
                '/nameNode.nameNode/cd',
                request_serializer=nameNode__pb2.ClientCdRequest.SerializeToString,
                response_deserializer=nameNode__pb2.FinishACK.FromString,
                )
        self.dataNodeAppend = channel.unary_unary(
                '/nameNode.nameNode/dataNodeAppend',
                request_serializer=nameNode__pb2.NodeAppend.SerializeToString,
                response_deserializer=nameNode__pb2.FinishACK.FromString,
                )
        self.dataNodeLeave = channel.unary_unary(
                '/nameNode.nameNode/dataNodeLeave',
                request_serializer=nameNode__pb2.NodeLeave.SerializeToString,
                response_deserializer=nameNode__pb2.FinishACK.FromString,
                )
        self.dataNodeFinish = channel.unary_unary(
                '/nameNode.nameNode/dataNodeFinish',
                request_serializer=nameNode__pb2.NodeFinish.SerializeToString,
                response_deserializer=nameNode__pb2.FinishACK.FromString,
                )


class nameNodeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getDataNode(self, request, context):
        """Client
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def wave(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def mkdir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ls(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cd(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def dataNodeAppend(self, request, context):
        """DataNode
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def dataNodeLeave(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def dataNodeFinish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_nameNodeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getDataNode': grpc.unary_unary_rpc_method_handler(
                    servicer.getDataNode,
                    request_deserializer=nameNode__pb2.ClientFileRequest.FromString,
                    response_serializer=nameNode__pb2.ClientFileRespond.SerializeToString,
            ),
            'wave': grpc.unary_unary_rpc_method_handler(
                    servicer.wave,
                    request_deserializer=nameNode__pb2.ClientFinish.FromString,
                    response_serializer=nameNode__pb2.FinishACK.SerializeToString,
            ),
            'mkdir': grpc.unary_unary_rpc_method_handler(
                    servicer.mkdir,
                    request_deserializer=nameNode__pb2.ClientMkdirRequest.FromString,
                    response_serializer=nameNode__pb2.FinishACK.SerializeToString,
            ),
            'ls': grpc.unary_unary_rpc_method_handler(
                    servicer.ls,
                    request_deserializer=nameNode__pb2.ClientLsRequest.FromString,
                    response_serializer=nameNode__pb2.ClientLsResponse.SerializeToString,
            ),
            'cd': grpc.unary_unary_rpc_method_handler(
                    servicer.cd,
                    request_deserializer=nameNode__pb2.ClientCdRequest.FromString,
                    response_serializer=nameNode__pb2.FinishACK.SerializeToString,
            ),
            'dataNodeAppend': grpc.unary_unary_rpc_method_handler(
                    servicer.dataNodeAppend,
                    request_deserializer=nameNode__pb2.NodeAppend.FromString,
                    response_serializer=nameNode__pb2.FinishACK.SerializeToString,
            ),
            'dataNodeLeave': grpc.unary_unary_rpc_method_handler(
                    servicer.dataNodeLeave,
                    request_deserializer=nameNode__pb2.NodeLeave.FromString,
                    response_serializer=nameNode__pb2.FinishACK.SerializeToString,
            ),
            'dataNodeFinish': grpc.unary_unary_rpc_method_handler(
                    servicer.dataNodeFinish,
                    request_deserializer=nameNode__pb2.NodeFinish.FromString,
                    response_serializer=nameNode__pb2.FinishACK.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nameNode.nameNode', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class nameNode(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getDataNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nameNode.nameNode/getDataNode',
            nameNode__pb2.ClientFileRequest.SerializeToString,
            nameNode__pb2.ClientFileRespond.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def wave(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nameNode.nameNode/wave',
            nameNode__pb2.ClientFinish.SerializeToString,
            nameNode__pb2.FinishACK.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def mkdir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nameNode.nameNode/mkdir',
            nameNode__pb2.ClientMkdirRequest.SerializeToString,
            nameNode__pb2.FinishACK.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ls(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nameNode.nameNode/ls',
            nameNode__pb2.ClientLsRequest.SerializeToString,
            nameNode__pb2.ClientLsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def cd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nameNode.nameNode/cd',
            nameNode__pb2.ClientCdRequest.SerializeToString,
            nameNode__pb2.FinishACK.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def dataNodeAppend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nameNode.nameNode/dataNodeAppend',
            nameNode__pb2.NodeAppend.SerializeToString,
            nameNode__pb2.FinishACK.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def dataNodeLeave(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nameNode.nameNode/dataNodeLeave',
            nameNode__pb2.NodeLeave.SerializeToString,
            nameNode__pb2.FinishACK.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def dataNodeFinish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nameNode.nameNode/dataNodeFinish',
            nameNode__pb2.NodeFinish.SerializeToString,
            nameNode__pb2.FinishACK.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
